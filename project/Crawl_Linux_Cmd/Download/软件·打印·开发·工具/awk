<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8" />
<meta name="renderer" content="webkit">
<title>
awk命令_Linux awk 命令用法详解：文本和数据进行处理的编程语言</title>
<link rel="shortcut icon" href="http://man.linuxde.net/favicon.ico" type="image/x-icon" />
<link rel="pingback" href="http://man.linuxde.net/xmlrpc.php" />
<link href="http://112.124.15.130/res/linuxde_man/style.css" rel="stylesheet" type="text/css">
<script type="text/javascript" src="http://112.124.15.130/res/linuxde_man/js/jquery-1.8.3.min.js"></script>
<!--[if IE 6]>
<script src="http://112.124.15.130/res/linuxde_man/js/belatedPNG.js"></script>
<script>DD_belatedPNG.fix('*');</script>
<script src="http://letskillie6.googlecode.com/svn/trunk/letskillie6.zh_CN.pack.js"></script>
<![endif]-->
<link rel='canonical' href='http://man.linuxde.net/awk' />
<link rel="stylesheet" href="http://man.linuxde.net/wp-content/plugins/wp-content-index/wp-content-index.css" type="text/css" type="text/css" media="all" />
</head>
<body>
<noscript>
<p class="nojs">您的浏览器已经禁用了脚本，这会严重影响您正常使用本站的功能，请开启！</p>
</noscript>
<div class="man_linuxde_net_page">
<div class="layout_hd">
    <div class="logo l">
        <h2><a title="Linux命令大全" href="http://man.linuxde.net/">
            Linux命令大全            </a></h2>
    </div>
    <div class="nav r"><ul id="menu-%e8%8f%9c%e5%8d%951" class="menu"><li id="menu-item-4" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-4"><a href="http://man.linuxde.net/">首页搜索</a></li>
<li id="menu-item-6" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-6"><a href="http://man.linuxde.net/par/2">系统管理</a></li>
<li id="menu-item-7" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-7"><a href="http://man.linuxde.net/par/5">网络管理</a></li>
<li id="menu-item-8" class="menu-item menu-item-type-taxonomy menu-item-object-category current-post-ancestor current-menu-parent current-post-parent menu-item-8"><a href="http://man.linuxde.net/par/4">软件·打印·开发·工具</a></li>
<li id="menu-item-9" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-9"><a href="http://man.linuxde.net/par/1">文件和目录管理</a></li>
<li id="menu-item-10" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-10"><a href="http://man.linuxde.net/par/3">硬件·内核·Shell·监测</a></li>
<li id="menu-item-2096" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-2096"><a target="_blank" href="http://www.linuxde.net">Linux Today</a></li>
</ul></div>    <div class="c"></div>
</div>
<div class="layout layout_bd">
<script type='text/javascript'>
function addLink() {
    var body_element = document.getElementsByTagName('body')[0];
    var selection;
    selection = window.getSelection();
    var pagelink = "<br /><br /> 来自: <a href='"+document.location.href+"'>"+document.location.href+"</a>"; 
    var copy_text = selection + pagelink;
    var new_div = document.createElement('div');
    new_div.style.left='-99999px';
    new_div.style.position='absolute';
    body_element.appendChild(new_div );
    new_div.innerHTML = copy_text ;
    selection.selectAllChildren(new_div );
    window.setTimeout(function() {
        body_element.removeChild(new_div );
    },0);
}
document.oncopy = addLink;
</script>
<div class="single_default">
        <div class="main">
        <div class="breadcrumb">当前位置：<a href="http://man.linuxde.net">首页</a> &raquo; <a href="http://man.linuxde.net/par/4" rel="category tag">软件·打印·开发·工具</a> &raquo; awk</div>
        <div class="post_hd clearfix">
            <h1 class="l">awk命令</h1>
            <div class="tag f_yh r">
                <a href="http://man.linuxde.net/sub/%e5%b8%b8%e7%94%a8%e5%b7%a5%e5%85%b7%e5%91%bd%e4%bb%a4" rel="tag">常用工具命令</a>            </div>
        </div>
        <div class="post_bd post">
            <div id="content-index" class="content-index" style="float:right;"><div class="content-index-title">本文索引</div><span class="content-index-toctoggle">[<a id="content-index-togglelink" href="javascript:content_index_toggleToc()">隐藏</a>]</span>
<script type="text/javascript" language="javascript">
window.content_index_showTocToggle=true;function content_index_toggleToc(){var tts="显示";var tth="隐藏";if(window.content_index_showTocToggle){window.content_index_showTocToggle=false;document.getElementById("content-index-contents").style.display="none";document.getElementById("content-index-togglelink").innerHTML=tts}else{window.content_index_showTocToggle=true;document.getElementById("content-index-contents").style.display="block";document.getElementById("content-index-togglelink").innerHTML=tth}}
</script>
<ul id="content-index-contents"><li class="content-index-level-1"><a href="http://man.linuxde.net/awk#awk命令格式和选项" title="awk命令格式和选项"><span>awk命令格式和选项</span></a></li><li class="content-index-level-1"><a href="http://man.linuxde.net/awk#awk模式和操作" title="awk模式和操作"><span>awk模式和操作</span></a><ul class="children"><li class="content-index-level-2"><a href="http://man.linuxde.net/awk#模式" title="模式"><span>模式</span></a></li><li class="content-index-level-2"><a href="http://man.linuxde.net/awk#操作" title="操作"><span>操作</span></a></li></ul></li><li class="content-index-level-1"><a href="http://man.linuxde.net/awk#awk脚本基本结构" title="awk脚本基本结构"><span>awk脚本基本结构</span></a><ul class="children"><li class="content-index-level-2"><a href="http://man.linuxde.net/awk#awk的工作原理" title="awk的工作原理"><span>awk的工作原理</span></a></li></ul></li><li class="content-index-level-1"><a href="http://man.linuxde.net/awk#awk内置变量（预定义变量）" title="awk内置变量（预定义变量）"><span>awk内置变量（预定义变量）</span></a></li><li class="content-index-level-1"><a href="http://man.linuxde.net/awk#将外部变量值传递给awk" title="将外部变量值传递给awk"><span>将外部变量值传递给awk</span></a></li><li class="content-index-level-1"><a href="http://man.linuxde.net/awk#awk运算与判断" title="awk运算与判断"><span>awk运算与判断</span></a><ul class="children"><li class="content-index-level-2"><a href="http://man.linuxde.net/awk#算术运算符" title="算术运算符"><span>算术运算符</span></a></li><li class="content-index-level-2"><a href="http://man.linuxde.net/awk#赋值运算符" title="赋值运算符"><span>赋值运算符</span></a></li><li class="content-index-level-2"><a href="http://man.linuxde.net/awk#逻辑运算符" title="逻辑运算符"><span>逻辑运算符</span></a></li><li class="content-index-level-2"><a href="http://man.linuxde.net/awk#正则运算符" title="正则运算符"><span>正则运算符</span></a></li><li class="content-index-level-2"><a href="http://man.linuxde.net/awk#关系运算符" title="关系运算符"><span>关系运算符</span></a></li><li class="content-index-level-2"><a href="http://man.linuxde.net/awk#其它运算符" title="其它运算符"><span>其它运算符</span></a></li><li class="content-index-level-2"><a href="http://man.linuxde.net/awk#运算级优先级表" title="运算级优先级表"><span>运算级优先级表</span></a></li></ul></li><li class="content-index-level-1"><a href="http://man.linuxde.net/awk#awk高级输入输出" title="awk高级输入输出"><span>awk高级输入输出</span></a><ul class="children"><li class="content-index-level-2"><a href="http://man.linuxde.net/awk#读取下一条记录" title="读取下一条记录"><span>读取下一条记录</span></a></li><li class="content-index-level-2"><a href="http://man.linuxde.net/awk#简单地读取一条记录" title="简单地读取一条记录"><span>简单地读取一条记录</span></a></li><li class="content-index-level-2"><a href="http://man.linuxde.net/awk#关闭文件" title="关闭文件"><span>关闭文件</span></a></li><li class="content-index-level-2"><a href="http://man.linuxde.net/awk#输出到一个文件" title="输出到一个文件"><span>输出到一个文件</span></a></li></ul></li><li class="content-index-level-1"><a href="http://man.linuxde.net/awk#设置字段定界符" title="设置字段定界符"><span>设置字段定界符</span></a></li><li class="content-index-level-1"><a href="http://man.linuxde.net/awk#流程控制语句" title="流程控制语句"><span>流程控制语句</span></a><ul class="children"><li class="content-index-level-2"><a href="http://man.linuxde.net/awk#条件判断语句" title="条件判断语句"><span>条件判断语句</span></a></li><li class="content-index-level-2"><a href="http://man.linuxde.net/awk#循环语句" title="循环语句"><span>循环语句</span></a><ul class="children"><li class="content-index-level-3"><a href="http://man.linuxde.net/awk#while语句" title="while语句"><span>while语句</span></a></li><li class="content-index-level-3"><a href="http://man.linuxde.net/awk#for循环" title="for循环"><span>for循环</span></a></li><li class="content-index-level-3"><a href="http://man.linuxde.net/awk#do循环" title="do循环"><span>do循环</span></a></li></ul></li><li class="content-index-level-2"><a href="http://man.linuxde.net/awk#其他语句" title="其他语句"><span>其他语句</span></a></li></ul></li><li class="content-index-level-1"><a href="http://man.linuxde.net/awk#数组应用" title="数组应用"><span>数组应用</span></a><ul class="children"><li class="content-index-level-2"><a href="http://man.linuxde.net/awk#数组的定义" title="数组的定义"><span>数组的定义</span></a></li><li class="content-index-level-2"><a href="http://man.linuxde.net/awk#数组相关函数" title="数组相关函数"><span>数组相关函数</span></a></li><li class="content-index-level-2"><a href="http://man.linuxde.net/awk#二维、多维数组使用" title="二维、多维数组使用"><span>二维、多维数组使用</span></a></li></ul></li><li class="content-index-level-1"><a href="http://man.linuxde.net/awk#内置函数" title="内置函数"><span>内置函数</span></a><ul class="children"><li class="content-index-level-2"><a href="http://man.linuxde.net/awk#算术函数" title="算术函数"><span>算术函数</span></a></li><li class="content-index-level-2"><a href="http://man.linuxde.net/awk#字符串函数" title="字符串函数"><span>字符串函数</span></a></li><li class="content-index-level-2"><a href="http://man.linuxde.net/awk#一般函数" title="一般函数"><span>一般函数</span></a></li><li class="content-index-level-2"><a href="http://man.linuxde.net/awk#时间函数" title="时间函数"><span>时间函数</span></a></li></ul></li></ul></div>
<p>
	<strong>awk</strong>是一种编程语言，用于在linux/unix下对文本和数据进行处理。数据可以来自标准输入(stdin)、一个或多个文件，或其它命令的输出。它支持用户自定义函数和动态正则表达式等先进功能，是linux/unix下的一个强大编程工具。它在命令行中使用，但更多是作为脚本来使用。awk有很多内建的功能，比如数组、函数等，这是它和C语言的相同之处，灵活性是awk最大的优势。
</p>
<h2 id="awk命令格式和选项">
	awk命令格式和选项<br />
</h2>
<p>
	<strong>语法形式</strong>
</p>
<pre>
awk [options] &#39;script&#39; var=value <span class='wp_keywordlink'><a href="http://man.linuxde.net/file" title="file命令" target="_blank">file</a></span>(s)
awk [options] -f scriptfile var=value file(s)</pre>
<p>
	<strong>常用命令选项</strong>
</p>
<ul>
<li>
		<strong><span style="color:#f00;">-F</span> fs &nbsp;&nbsp;</strong>fs指定输入分隔符，fs可以是字符串或正则表达式，如-F:
	</li>
<li>
		<strong><span style="color:#f00;">-v</span> var=value &nbsp;&nbsp;</strong>赋值一个用户定义变量，将外部变量传递给awk
	</li>
<li>
		<strong><span style="color:#f00;">-f </span>scripfile &nbsp;</strong>从脚本文件中读取awk命令
	</li>
<li>
		<strong><span style="color:#f00;">-m[fr]</span> val &nbsp;&nbsp;</strong>对val值设置内在限制，-mf选项限制分配给val的最大块数目；-mr选项限制记录的最大数目。这两个功能是Bell实验室版awk的扩展功能，在标准awk中不适用。
	</li>
</ul>
<h2 id="awk模式和操作">
	awk模式和操作<br />
</h2>
<p>
	awk脚本是由模式和操作组成的。
</p>
<h3 id="模式">
	模式<br />
</h3>
<p>
	模式可以是以下任意一个：
</p>
<ul>
<li>
		/正则表达式/：使用通配符的扩展集。
	</li>
<li>
		关系表达式：使用运算符进行操作，可以是字符串或数字的比较测试。
	</li>
<li>
		模式匹配表达式：用运算符<code>~</code>（匹配）和<code>~!</code>（不匹配）。
	</li>
<li>
		BEGIN语句块、pattern语句块、END语句块：参见<a href="http://man.linuxde.net/awk#awk的工作原理">awk的工作原理</a>
	</li>
</ul>
<h3 id="操作">
	操作<br />
</h3>
<p>
	操作由一个或多个命令、函数、表达式组成，之间由换行符或分号隔开，并位于大括号内，主要部分是：
</p>
<ul>
<li>
		<a href="http://man.linuxde.net/awk#awk内置变量（预定义变量）">变量</a>或<a href="http://man.linuxde.net/awk#数组应用">数组</a>赋值
	</li>
<li>
		<a href="http://man.linuxde.net/awk#awk高级输入输出">输出命令</a>
	</li>
<li>
		<a href="http://man.linuxde.net/awk#内置函数">内置函数</a>
	</li>
<li>
		<a href="http://man.linuxde.net/awk#流程控制语句">控制流语句</a>
	</li>
</ul>
<h2 id="awk脚本基本结构">
	awk脚本基本结构<br />
</h2>
<pre>
awk &#39;<span style="color:#f00;">BEGIN{ print &quot;start&quot; }</span> <span style="color:#008000;">pattern{ commands }</span> <span style="color:#00f;">END{ print &quot;end&quot; }</span>&#39; file</pre>
<p>
	一个awk脚本通常由：<span style="color:#f00;">BEGIN语句块</span>、<span style="color:#008000;">能够使用模式匹配的通用语句块</span>、<span style="color:#00f;">END语句块</span>3部分组成，这三个部分是可选的。任意一个部分都可以不出现在脚本中，<span style="color:#a52a2a;">脚本通常是被<strong>单引号</strong>或<strong>双引号</strong>中</span>，例如：
</p>
<pre>
awk <span style="color:#f00;">&#39;</span>BEGIN{ i=0 } { i++ } END{ print i }<span style="color:#f00;">&#39;</span> filename
awk <span style="color:#f00;">&quot;</span>BEGIN{ i=0 } { i++ } END{ print i }<span style="color:#f00;">&quot;</span> filename</pre>
<h3 id="awk的工作原理">
	awk的工作原理<br />
</h3>
<pre>
awk &#39;BEGIN{ commands } pattern{ commands } END{ commands }&#39;</pre>
<ul>
<li>
		第一步：执行<code>BEGIN{ commands }</code>语句块中的语句；
	</li>
<li>
		第二步：从文件或标准输入(stdin)读取一行，然后执行<code>pattern{ commands }</code>语句块，它<span style="color:#b22222;">逐行扫描文件</span>，从第一行到最后一行重复这个过程，直到文件全部被读取完毕。
	</li>
<li>
		第三步：当读至输入流末尾时，执行<code>END{ commands }</code>语句块。
	</li>
</ul>
<p>
	<strong>BEGIN语句块</strong>在awk开始从输入流中<span style="color:#b22222;">读取行<strong>之前</strong>被执行</span>，这是一个可选的语句块，比如变量初始化、打印输出表格的表头等语句通常可以写在BEGIN语句块中。
</p>
<p>
	<strong>END语句块</strong>在awk从输入流中读<span style="color:#b22222;">取完所有的行<strong>之后</strong>即被执行</span>，比如打印所有行的分析结果这类信息汇总都是在END语句块中完成，它也是一个可选语句块。
</p>
<p>
	<strong>pattern语句块</strong>中的通用命令是最重要的部分，它也是可选的。<span style="color:#b22222;">如果没有提供pattern语句块，则默认执行<code>{ print }</code>，即打印每一个读取到的行</span>，awk读取的每一行都会执行该语句块。
</p>
<p>
	<strong>示例</strong>
</p>
<pre>
<span class='wp_keywordlink'><a href="http://man.linuxde.net/echo" title="echo命令" target="_blank">echo</a></span> -e &quot;A line 1nA line 2&quot; | awk &#39;BEGIN{ print &quot;Start&quot; } { print } END{ print &quot;End&quot; }&#39;
<span style="color:#808080;">Start
A line 1
A line 2
End</span></pre>
<p>
	当使用不带参数的<code>print</code>时，它就打印当前行，当<code>print</code>的参数是以逗号进行分隔时，打印时则以空格作为定界符。<span style="color:#b22222;">在awk的print语句块中双引号是被当作拼接符使用</span>，例如：
</p>
<pre>
echo | awk &#39;{ var1=&quot;v1&quot;; var2=&quot;v2&quot;; var3=&quot;v3&quot;; print var1,var2,var3; }&#39; 
<span style="color:#808080;">v1 v2 v3</span></pre>
<p>
	双引号拼接使用：
</p>
<pre>
echo | awk &#39;{ var1=&quot;v1&quot;; var2=&quot;v2&quot;; var3=&quot;v3&quot;; print var1&quot;=&quot;var2&quot;=&quot;var3; }&#39;
<span style="color:#808080;">v1=v2=v3</span></pre>
<p>
	{ }类似一个循环体，会对文件中的每一行进行迭代，通常变量初始化语句（如：i=0）以及打印文件头部的语句放入BEGIN语句块中，将打印的结果等语句放在END语句块中。
</p>
<h2 id="awk内置变量（预定义变量）">
	awk内置变量（预定义变量）<br />
</h2>
<p>
	说明：[A][N][P][G]表示第一个支持变量的工具，[A]=awk、[N]=nawk、[P]=POSIXawk、[G]=gawk
</p>
<pre>
<strong>$n</strong> 当前记录的第n个字段，比如n为1表示第一个字段，n为2表示第二个字段。 
<strong>$0</strong> 这个变量包含执行过程中当前行的文本内容。
[N]<strong> ARGC </strong>命令行参数的数目。
[G] <strong>ARGIND </strong>命令行中当前文件的位置（从0开始算）。
[N] <strong>ARGV </strong>包含命令行参数的数组。
[G] <strong>CONVFMT </strong>数字转换格式（默认值为%.6g）。
[P] <strong>ENVIRON </strong>环境变量关联数组。
[N] <strong>ERRNO</strong> 最后一个系统错误的描述。
[G] <strong>FIELDWIDTHS </strong>字段宽度列表（用空格键分隔）。
[A] <strong>FILENAME </strong>当前输入文件的名。
[P] <strong>FNR </strong>同NR，但相对于当前文件。
[A] <strong>FS </strong>字段分隔符（默认是任何空格）。
[G]<strong> IGNORECASE</strong> 如果为真，则进行忽略大小写的匹配。
[A] <strong>NF </strong>表示字段数，在执行过程中对应于当前的字段数。
[A] <strong>NR</strong> 表示记录数，在执行过程中对应于当前的行号。
[A] <strong>OFMT </strong>数字的输出格式（默认值是%.6g）。
[A] <strong>OFS </strong>输出字段分隔符（默认值是一个空格）。
[A] <strong>ORS </strong>输出记录分隔符（默认值是一个换行符）。
[A] <strong>RS </strong>记录分隔符（默认是一个换行符）。
[N] <strong>RSTART </strong>由match函数所匹配的字符串的第一个位置。
[N] <strong>RLENGTH </strong>由match函数所匹配的字符串的长度。
[N] <strong>SUBSEP </strong>数组下标分隔符（默认值是34）。</pre>
<p>
	<strong>示例</strong>
</p>
<pre>
echo -e &quot;line1 f2 f3nline2 f4 f5nline3 f6 f7&quot; | awk &#39;{print &quot;Line No:&quot;NR&quot;, No of fields:&quot;NF, &quot;$0=&quot;$0, &quot;$1=&quot;$1, &quot;$2=&quot;$2, &quot;$3=&quot;$3}&#39; 
<span style="color:#808080;">Line No:1, No of fields:3 $0=line1 f2 f3 $1=line1 $2=f2 $3=f3
Line No:2, No of fields:3 $0=line2 f4 f5 $1=line2 $2=f4 $3=f5
Line No:3, No of fields:3 $0=line3 f6 f7 $1=line3 $2=f6 $3=f7</span></pre>
<p>
	使用<code>print $NF</code>可以打印出一行中的最后一个字段，使用<code>$(NF-1)</code>则是打印倒数第二个字段，其他以此类推：
</p>
<pre>
echo -e &quot;line1 f2 f3n line2 f4 f5&quot; | awk &#39;{print <span style="color:#f00;">$NF</span>}&#39;
<span style="color:#808080;">f3
f5</span></pre>
<pre>
echo -e &quot;line1 f2 f3n line2 f4 f5&quot; | awk &#39;{print $(<span style="color:#f00;">NF-1</span>)}&#39;
<span style="color:#808080;">f2
f4</span>
</pre>
<p>
	打印每一行的第二和第三个字段：
</p>
<pre>
awk &#39;{ print $2,$3 }&#39; filename</pre>
<p>
	统计文件中的行数：
</p>
<pre>
awk &#39;END{ print NR }&#39; filename</pre>
<p>
	以上命令只使用了END语句块，在读入每一行的时，awk会将NR更新为对应的行号，当到达最后一行NR的值就是最后一行的行号，所以END语句块中的NR就是文件的行数。
</p>
<p>
	一个每一行中第一个字段值累加的例子：
</p>
<pre>
<span class='wp_keywordlink'><a href="http://man.linuxde.net/seq" title="seq命令" target="_blank">seq</a></span> 5 | awk &#39;BEGIN{ <span class='wp_keywordlink'><a href="http://man.linuxde.net/sum" title="sum命令" target="_blank">sum</a></span>=0; print &quot;总和：&quot; } { print $1&quot;+&quot;; sum+=$1 } END{ print &quot;等于&quot;; print sum }&#39; 
<span style="color:#808080;">总和：
1+
2+
3+
4+
5+
等于
15</span></pre>
<h2 id="将外部变量值传递给awk">
	将外部变量值传递给awk<br />
</h2>
<p>
	借助<strong><code>-v</code>选项</strong>，可以将外部值（并非来自stdin）传递给awk：
</p>
<pre>
VAR=10000
echo | awk -v VARIABLE=$VAR &#39;{ print VARIABLE }&#39;</pre>
<p>
	另一种传递外部变量方法：
</p>
<pre>
var1=&quot;aaa&quot;
var2=&quot;bbb&quot;
echo | awk &#39;{ print v1,v2 }&#39; v1=$var1 v2=$var2</pre>
<p>
	当输入来自于文件时使用：
</p>
<pre>
awk &#39;{ print v1,v2 }&#39; v1=$var1 v2=$var2 filename</pre>
<p>
	以上方法中，变量之间用空格分隔作为awk的命令行参数跟随在BEGIN、{}和END语句块之后。
</p>
<h2 id="awk运算与判断">
	awk运算与判断<br />
</h2>
<p>
	作为一种程序设计语言所应具有的特点之一，awk支持多种运算，这些运算与C语言提供的基本相同。awk还提供了一系列内置的运算函数（如log、sqr、cos、sin等）和一些用于对字符串进行操作（运算）的函数（如length、substr等等）。这些函数的引用大大的提高了awk的运算功能。作为对条件转移指令的一部分，关系判断是每种程序设计语言都具备的功能，awk也不例外，awk中允许进行多种测试，作为样式匹配，还提供了模式匹配表达式~（匹配）和~!（不匹配）。作为对测试的一种扩充，awk也支持用逻辑运算符。
</p>
<h3 id="算术运算符">
	算术运算符<br />
</h3>
<table style="width: 500px;" summary="运算符">
<thead>
<tr>
<th>
				运算符
			</th>
<th>
				描述
			</th>
</tr>
</thead>
<tbody>
<tr>
<td>
				+ -
			</td>
<td>
				加，减
			</td>
</tr>
<tr>
<td>
				* / &amp;
			</td>
<td>
				乘，除与求余
			</td>
</tr>
<tr>
<td>
				+ - !
			</td>
<td>
				一元加，减和逻辑非
			</td>
</tr>
<tr>
<td>
				^ ***
			</td>
<td>
				求幂
			</td>
</tr>
<tr>
<td>
				++ --
			</td>
<td>
				增加或减少，作为前缀或后缀
			</td>
</tr>
</tbody>
</table>
<p>
	例：
</p>
<pre>
awk &#39;BEGIN{a=&quot;b&quot;;print a++,++a;}&#39;
<span style="color:#808080;">0 2</span></pre>
<p>
	<span style="color:#f00;">注意：所有用作算术运算符进行操作，操作数自动转为数值，所有非数值都变为0</span>
</p>
<h3 id="赋值运算符">
	赋值运算符<br />
</h3>
<table style="width: 500px;" summary="运算符">
<thead>
<tr>
<th>
				运算符
			</th>
<th>
				描述
			</th>
</tr>
</thead>
<tbody>
<tr>
<td>
				= += -= *= /= %= ^= **=
			</td>
<td>
				赋值语句
			</td>
</tr>
</tbody>
</table>
<p>
	例：
</p>
<pre>
a+=5; 等价于：a=a+5; 其它同类</pre>
<h3 id="逻辑运算符">
	逻辑运算符<br />
</h3>
<table style="width: 500px;" summary="运算符">
<thead>
<tr>
<th>
				运算符
			</th>
<th>
				描述
			</th>
</tr>
</thead>
<tbody>
<tr>
<td>
				||
			</td>
<td>
				逻辑或
			</td>
</tr>
<tr>
<td>
				&amp;&amp;
			</td>
<td>
				逻辑与
			</td>
</tr>
</tbody>
</table>
<p>
	例：
</p>
<pre>
awk &#39;BEGIN{a=1;b=2;print (a&gt;5 &amp;&amp; b&lt;=2),(a&gt;5 || b&lt;=2);}&#39;
<span style="color:#808080;">0 1</span></pre>
<h3 id="正则运算符">
	正则运算符<br />
</h3>
<table style="width: 500px;" summary="运算符">
<thead>
<tr>
<th>
				运算符
			</th>
<th>
				描述
			</th>
</tr>
</thead>
<tbody>
<tr>
<td>
				~ ~!
			</td>
<td>
				匹配正则表达式和不匹配正则表达式
			</td>
</tr>
</tbody>
</table>
<p>
	例：
</p>
<pre>
awk &#39;BEGIN{a=&quot;100testa&quot;;if(a ~ /^100*/){print &quot;ok&quot;;}}&#39;
<span style="color:#808080;">ok</span></pre>
<h3 id="关系运算符">
	关系运算符<br />
</h3>
<table style="width: 500px;" summary="运算符">
<thead>
<tr>
<th>
				运算符
			</th>
<th>
				描述
			</th>
</tr>
</thead>
<tbody>
<tr>
<td>
				&lt; &lt;= &gt; &gt;= != ==
			</td>
<td>
				关系运算符
			</td>
</tr>
</tbody>
</table>
<p>
	例：
</p>
<pre>
awk &#39;BEGIN{a=11;if(a &gt;= 9){print &quot;ok&quot;;}}&#39;
<span style="color:#808080;">ok</span></pre>
<p>
	<span style="color:#f00;">注意：&gt; &lt; 可以作为字符串比较，也可以用作数值比较，关键看操作数如果是字符串就会转换为字符串比较。两个都为数字才转为数值比较。字符串比较：按照ASCII码顺序比较。</span>
</p>
<h3 id="其它运算符">
	其它运算符<br />
</h3>
<table style="width: 500px;" summary="运算符">
<thead>
<tr>
<th>
				运算符
			</th>
<th>
				描述
			</th>
</tr>
</thead>
<tbody>
<tr>
<td>
				$
			</td>
<td>
				字段引用
			</td>
</tr>
<tr>
<td>
				空格
			</td>
<td>
				字符串连接符
			</td>
</tr>
<tr>
<td>
				?:
			</td>
<td>
				C条件表达式
			</td>
</tr>
<tr>
<td>
				in
			</td>
<td>
				数组中是否存在某键值
			</td>
</tr>
</tbody>
</table>
<p>
	例：
</p>
<pre>
awk &#39;BEGIN{a=&quot;b&quot;;print a==&quot;b&quot;?&quot;ok&quot;:&quot;err&quot;;}&#39;
<span style="color:#808080;">ok</span></pre>
<pre>
awk &#39;BEGIN{a=&quot;b&quot;;arr[0]="b";arr[1]=&quot;c&quot;;print (a in arr);}&#39;
<span style="color:#808080;">0</span></pre>
<pre>
awk &#39;BEGIN{a=&quot;b&quot;;arr[0]="b";arr["b"]=&quot;c&quot;;print (a in arr);}&#39;
<span style="color:#808080;">1</span></pre>
<h3 id="运算级优先级表">
	运算级优先级表<br />
</h3>
<p style="text-align: center;">
	<img alt="级别越高越优先" class="alignnone size-full wp-image-880" height="327" src="http://man.linuxde.net/wp-content/uploads/2013/12/1225512if.gif" width="599" /><br />
	级别越高越优先
</p>
<h2 id="awk高级输入输出">
	awk高级输入输出<br />
</h2>
<h3 id="读取下一条记录">
	读取下一条记录<br />
</h3>
<p>
	awk中<code>next</code>语句使用：在循环逐行匹配，如果遇到next，就会跳过当前行，直接忽略下面语句。而进行下一行匹配。net语句一般用于多行合并：
</p>
<pre>
<span class='wp_keywordlink'><a href="http://man.linuxde.net/cat" title="cat命令" target="_blank">cat</a></span> text.txt
<span style="color:#808080;">a
b
c
d
e</span>

awk &#39;NR%2==1{next}{print NR,$0;}&#39; text.txt
<span style="color:#808080;">2 b
4 d</span></pre>
<p>
	当记录行号除以2余1，就跳过当前行。下面的<code>print NR,$0</code>也不会执行。下一行开始，程序有开始判断<code>NR%2</code>值。这个时候记录行号是<code>：2</code> ，就会执行下面语句块：<code>&#39;print NR,$0&#39;</code>
</p>
<p>
	分析发现需要将包含有&ldquo;web&rdquo;行进行跳过，然后需要将内容与下面行合并为一行：
</p>
<pre>
cat text.txt
<span style="color:#808080;">web01[192.168.2.100]
<span class='wp_keywordlink'><a href="http://man.linuxde.net/httpd" title="httpd命令" target="_blank">httpd</a></span>            ok
tomcat               ok
<span class='wp_keywordlink'><a href="http://man.linuxde.net/sendmail" title="sendmail命令" target="_blank">sendmail</a></span>               ok
web02[192.168.2.101]
httpd            ok
postfix               ok
web03[192.168.2.102]
mysqld            ok
httpd               ok</span>
0
awk &#39;/^web/{T=$0;next;}{print T&quot;:t&quot;$0;}&#39; <span class='wp_keywordlink'><a href="http://man.linuxde.net/test" title="test命令" target="_blank">test</a></span>.txt
<span style="color:#808080;">web01[192.168.2.100]:   httpd            ok
web01[192.168.2.100]:   tomcat               ok
web01[192.168.2.100]:   sendmail               ok
web02[192.168.2.101]:   httpd            ok
web02[192.168.2.101]:   postfix               ok
web03[192.168.2.102]:   mysqld            ok
web03[192.168.2.102]:   httpd               ok</span></pre>
<h3 id="简单地读取一条记录">
	简单地读取一条记录<br />
</h3>
<p>
	<code>awk getline</code>用法：输出重定向需用到<code>getline函数</code>。getline从标准输入、管道或者当前正在处理的文件之外的其他输入文件获得输入。它负责从输入获得下一行的内容，并给NF,NR和FNR等内建变量赋值。<span style="color:#f00;">如果得到一条记录，getline函数返回1，如果到达文件的末尾就返回0，如果出现错误，例如打开文件失败，就返回-1</span>。
</p>
<p>
	<span style="color:#0000cd;">getline语法：getline var，变量var包含了特定行的内容。</span>
</p>
<p>
	awk getline从整体上来说，用法说明：
</p>
<ul>
<li>
		<strong>当其左右<span style="color:#f00;">无</span>重定向符<code>|</code>或<code>&lt;</code>时：</strong>getline作用于当前文件，读入当前文件的第一行给其后跟的变量<code>var</code>或<code>$0</code>（无变量），应该注意到，由于awk在处理getline之前已经读入了一行，所以getline得到的返回结果是隔行的。
	</li>
<li>
		<strong>当其左右<span style="color:#f00;">有</span>重定向符<code>|</code>或<code>&lt;</code>时：</strong>getline则作用于定向输入文件，由于该文件是刚打开，并没有被awk读入一行，只是getline读入，那么getline返回的是该文件的第一行，而不是隔行。
	</li>
</ul>
<p>
	<strong>示例：</strong>
</p>
<p>
	执行linux的<code><span class='wp_keywordlink'><a href="http://man.linuxde.net/date" title="date命令" target="_blank">date</a></span></code>命令，并通过管道输出给<code>getline</code>，然后再把输出赋值给自定义变量out，并打印它：
</p>
<pre>
awk &#39;BEGIN{ &quot;date&quot; | getline out; print out }&#39; test</pre>
<p>
	执行shell的date命令，并通过管道输出给getline，然后getline从管道中读取并将输入赋值给out，<span class='wp_keywordlink'><a href="http://man.linuxde.net/split" title="split命令" target="_blank">split</a></span>函数把变量out转化成数组mon，然后打印数组mon的第二个元素：
</p>
<pre>
awk &#39;BEGIN{ &quot;date&quot; | getline out; split(out,mon); print mon[2] }&#39; test</pre>
<p>
	命令<span class='wp_keywordlink'><a href="http://man.linuxde.net/ls" title="ls命令" target="_blank">ls</a></span>的输出传递给geline作为输入，循环使getline从ls的输出中读取一行，并把它打印到屏幕。这里没有输入文件，因为BEGIN块在打开输入文件前执行，所以可以忽略输入文件。
</p>
<pre>
awk &#39;BEGIN{ while( &quot;ls&quot; | getline) print }&#39;</pre>
<h3 id="关闭文件">
	关闭文件<br />
</h3>
<p>
	awk中允许在程序中关闭一个输入或输出文件，方法是使用awk的close语句。
</p>
<pre>
close(&quot;filename&quot;)</pre>
<p>
	filename可以是getline打开的文件，也可以是stdin，包含文件名的变量或者getline使用的确切命令。或一个输出文件，可以是stdout，包含文件名的变量或使用管道的确切命令。
</p>
<h3 id="输出到一个文件">
	输出到一个文件<br />
</h3>
<p>
	awk中允许用如下方式将结果输出到一个文件：
</p>
<pre>
echo | awk &#39;{<span class='wp_keywordlink'><a href="http://man.linuxde.net/printf" title="printf命令" target="_blank">printf</a></span>(&quot;hello word!n&quot;) &gt; &quot;datafile&quot;}&#39;
或
echo | awk &#39;{printf(&quot;hello word!n&quot;) &gt;&gt; &quot;datafile&quot;}&#39;</pre>
<h2 id="设置字段定界符">
	设置字段定界符<br />
</h2>
<p>
	<span style="color:#f00;">默认的字段定界符是空格</span>，可以使用<code>-F &quot;定界符&quot;</code><span style="color:#f00;"> </span>明确指定一个定界符：
</p>
<pre>
awk -F: &#39;{ print $NF }&#39; /etc/<span class='wp_keywordlink'><a href="http://man.linuxde.net/passwd" title="passwd命令" target="_blank">passwd</a></span>
或
awk &#39;BEGIN{ FS=&quot;:&quot; } { print $NF }&#39; /etc/passwd</pre>
<p>
	在<code>BEGIN语句块</code>中则可以用<code>OFS=&ldquo;定界符&rdquo;</code>设置输出字段的定界符。
</p>
<h2 id="流程控制语句">
	<span style="font-family: Arial, Verdana, sans-serif;">流程控制语句</span><br />
</h2>
<p>
	在linux awk的while、do-while和for语句中允许使用break,continue语句来控制流程走向，也允许使用<span class='wp_keywordlink'><a href="http://man.linuxde.net/exit" title="exit命令" target="_blank">exit</a></span>这样的语句来退出。break中断当前正在执行的循环并跳到循环外执行下一条语句。if 是流程选择用法。awk中，流程控制语句，语法结构，与c语言类型。有了这些语句，其实很多shell程序都可以交给awk，而且性能是非常快的。下面是各个语句用法。
</p>
<h3 id="条件判断语句">
	条件判断语句<br />
</h3>
<pre>
if(表达式)
  语句1
else
  语句2</pre>
<p>
	格式中语句1可以是多个语句，<span style="color:#f00;">为了方便判断和阅读，最好将多个语句用{}括起来</span>。awk分枝结构允许嵌套，其格式为：
</p>
<pre>
if(表达式)
  {语句1}
else if(表达式)
  {语句2}
else
  {语句3}</pre>
<p>
	示例：
</p>
<pre>
awk &#39;BEGIN{
test=100;
if(test&gt;90){
  print &quot;very good&quot;;
  }
  else if(test&gt;60){
    print &quot;good&quot;;
  }
  else{
    print &quot;no pass&quot;;
  }
}&#39;

<span style="color:#808080;">very good</span></pre>
<p>
	每条命令语句后面可以用<code>;</code><span style="color:#f00;"><strong>分号</strong></span>结尾。
</p>
<h3 id="循环语句">
	循环语句<br />
</h3>
<h4 id="while语句">
	while语句<br />
</h4>
<pre>
while(表达式)
  {语句}</pre>
<p>
	示例：
</p>
<pre>
awk &#39;BEGIN{
test=100;
total=0;
while(i&lt;=test){
  total+=i;
  i++;
}
print total;
}&#39;
<span style="color:#808080;">5050</span></pre>
<h4 id="for循环">
	for循环<br />
</h4>
<p>
	for循环有两种格式：
</p>
<p>
	<span style="color:#f00;">格式1：</span>
</p>
<pre>
for(变量 in 数组)
  {语句}</pre>
<p>
	示例：
</p>
<pre>
awk &#39;BEGIN{
for(k in ENVIRON){
  print k&quot;=&quot;ENVIRON[k];
}

}&#39;
<span style="color:#808080;">TERM=linux
G_BROKEN_FILENAMES=1
SHLVL=1
<span class='wp_keywordlink'><a href="http://man.linuxde.net/pwd" title="pwd命令" target="_blank">pwd</a></span>=/root/text
...
<span class='wp_keywordlink'><a href="http://man.linuxde.net/logname" title="logname命令" target="_blank">logname</a></span>=root
HOME=/root
SSH_CLIENT=192.168.1.21 53087 22</span></pre>
<p>
	注：ENVIRON是awk常量，是子典型数组。
</p>
<p>
	<span style="color:#f00;">格式2：</span>
</p>
<pre>
for(变量;条件;表达式)
  {语句}</pre>
<p>
	示例：
</p>
<pre>
awk &#39;BEGIN{
total=0;
for(i=0;i&lt;=100;i++){
  total+=i;
}
print total;
}&#39;
<span style="color:#808080;">5050</span></pre>
<h4 id="do循环">
	do循环<br />
</h4>
<pre>
do
{语句} while(条件)</pre>
<p>
	例子：
</p>
<pre>
awk &#39;BEGIN{ 
total=0;
i=0;
do {total+=i;i++;} while(i&lt;=100)
  print total;
}&#39;
<span style="color:#808080;">5050</span></pre>
<h3 id="其他语句">
	其他语句<br />
</h3>
<ul>
<li>
		<strong>break </strong>当 break 语句用于 while 或 for 语句时，导致退出程序循环。
	</li>
<li>
		<strong>continue </strong>当 continue 语句用于 while 或 for 语句时，使程序循环移动到下一个迭代。
	</li>
<li>
		<strong>next </strong>能能够导致读入下一个输入行，并返回到脚本的顶部。这可以避免对当前输入行执行其他的操作过程。
	</li>
<li>
		<strong>exit </strong>语句使主输入循环退出并将控制转移到END,如果END存在的话。如果没有定义END规则，或在END中应用exit语句，则终止脚本的执行。
	</li>
</ul>
<h2 id="数组应用">
	数组应用<br />
</h2>
<p>
	数组是awk的灵魂，处理文本中最不能少的就是它的数组处理。因为数组索引（下标）可以是数字和字符串在awk中数组叫做关联数组(associative arrays)。awk 中的数组不必提前声明，也不必声明大小。数组元素用0或空字符串来初始化，这根据上下文而定。
</p>
<h3 id="数组的定义">
	数组的定义<br />
</h3>
<p>
	数字做数组索引（下标）：
</p>
<pre>
Array[1]=&quot;sun&quot;
Array[2]=&quot;kai&quot;</pre>
<p>
	字符串做数组索引（下标）：
</p>
<pre>
Array["first"]=&quot;www&quot;
Array["<span class='wp_keywordlink'><a href="http://man.linuxde.net/last" title="last命令" target="_blank">last</a></span>"]=&quot;name&quot;
Array["birth"]=&quot;1987&quot;</pre>
<p>
	使用中<code>print Array[1]</code>会打印出sun；使用<code>print Array[2]</code>会打印出kai；使用<code>print["birth"]</code>会得到1987。
</p>
<p>
	<strong>读取数组的值</strong>
</p>
<pre>
{ for(item in array) {print array[item]}; }       <span style="color:#008000;">#输出的顺序是随机的</span>
{ for(i=1;i&lt;=len;i++) {print array[i]}; }         <span style="color:#008000;">#Len是数组的长度</span></pre>
<h3 id="数组相关函数">
	数组相关函数<br />
</h3>
<p>
	<strong>得到数组长度：</strong>
</p>
<pre>
awk &#39;BEGIN{<span class='wp_keywordlink'><a href="http://man.linuxde.net/info" title="info命令" target="_blank">info</a></span>=&quot;it is a test&quot;;lens=split(info,tA,&quot; &quot;);print length(tA),lens;}&#39;
<span style="color:#808080;">4 4</span></pre>
<p>
	length返回字符串以及数组长度，split进行分割字符串为数组，也会返回分割得到数组长度。
</p>
<pre>
awk &#39;BEGIN{info=&quot;it is a test&quot;;split(info,tA,&quot; &quot;);print asort(tA);}&#39;
<span style="color:#808080;">4</span></pre>
<p>
	asort对数组进行排序，返回数组长度。
</p>
<p>
	<strong>输出数组内容（无序，有序输出）：</strong>
</p>
<pre>
awk &#39;BEGIN{info=&quot;it is a test&quot;;split(info,tA,&quot; &quot;);for(k in tA){print k,tA[k];}}&#39;
<span style="color:#808080;">4 test
1 it
2 is
3 a </span></pre>
<p>
	<code>for&hellip;in</code>输出，因为数组是关联数组，默认是无序的。所以通过<code>for&hellip;in</code>得到是无序的数组。如果需要得到有序数组，需要通过下标获得。
</p>
<pre>
awk &#39;BEGIN{info=&quot;it is a test&quot;;tlen=split(info,tA,&quot; &quot;);for(k=1;k&lt;=tlen;k++){print k,tA[k];}}&#39;
<span style="color:#808080;">1 it
2 is
3 a
4 test</span></pre>
<p>
	注意：数组下标是从1开始，与C数组不一样。
</p>
<p>
	<strong>判断键值存在以及删除键值：</strong>
</p>
<pre>
<span style="color:#008000;">#错误的判断方法：</span>
awk &#39;BEGIN{tB["a"]="a1";tB["b"]="b1";if(tB["c"]!="1"){print "no found";};for(k in tB){print k,tB[k];}}&#39; 
<span style="color:#008000;">no found
a a1
b b1
c</span></pre>
<p>
	以上出现奇怪问题，<code>tB[&ldquo;c&rdquo;]</code>没有定义，但是循环时候，发现已经存在该键值，它的值为空，这里需要注意，awk数组是关联数组，只要通过数组引用它的key，就会自动创建改序列。
</p>
<pre>
<span style="color:#008000;">#正确判断方法：</span>
awk &#39;BEGIN{tB["a"]="a1";tB["b"]="b1";if( "c" in tB){print "ok";};for(k in tB){print k,tB[k];}}&#39;  
<span style="color:#008000;">a a1
b b1</span></pre>
<p>
	<code>if(key in array)</code>通过这种方法判断数组中是否包含<code>key</code>键值。
</p>
<pre>
<span style="color:#008000;">#删除键值：</span>
[chengmo@localhost ~]$ awk 'BEGIN{tB["a"]="a1";tB["b"]="b1";delete tB["a"];for(k in tB){print k,tB[k];}}&#39;                     
<span style="color:#808080;">b b1</span></pre>
<p>
	<code>delete array[key]</code>可以删除，对应数组<code>key</code>的，序列值。
</p>
<h3 id="二维、多维数组使用">
	二维、多维数组使用<br />
</h3>
<p>
	awk的多维数组在本质上是一维数组，更确切一点，awk在存储上并不支持多维数组。awk提供了逻辑上模拟二维数组的访问方式。例如，<code>array[2,4]=1</code>这样的访问是允许的。awk使用一个特殊的字符串<code>SUBSEP(�34)</code>作为分割字段，在上面的例子中，关联数组array存储的键值实际上是2�344。
</p>
<p>
	类似一维数组的成员测试，多维数组可以使用<code>if ( (i,j) in array)</code>这样的语法，但是下标必须放置在圆括号中。类似一维数组的循环访问，多维数组使用<code>for ( item in array )</code>这样的语法遍历数组。与一维数组不同的是，多维数组必须使用<code>split()</code>函数来访问单独的下标分量。
</p>
<pre>
awk &#39;BEGIN{
for(i=1;i&lt;=9;i++){
  for(j=1;j&lt;=9;j++){
    tarr[i,j]=i*j; print i,"*",j,"=",tarr[i,j];
  }
}
}&#39;
<span style="color:#808080;">1 * 1 = 1
1 * 2 = 2
1 * 3 = 3
1 * 4 = 4
1 * 5 = 5
1 * 6 = 6 
...
9 * 6 = 54
9 * 7 = 63
9 * 8 = 72
9 * 9 = 81</span></pre>
<p>
	可以通过<code>array[k,k2]</code>引用获得数组内容。
</p>
<p>
	另一种方法：
</p>
<pre>
awk &#39;BEGIN{
for(i=1;i&lt;=9;i++){
  for(j=1;j&lt;=9;j++){
    tarr[i,j]=i*j;
  }
}
for(m in tarr){
  split(m,tarr2,SUBSEP); print tarr2[1],"*",tarr2[2],"=",tarr[m];
}
}&#39;</pre>
<h2 id="内置函数">
	内置函数<br />
</h2>
<p>
	awk内置函数，主要分以下3种类似：算数函数、字符串函数、其它一般函数、时间函数。
</p>
<h3 id="算术函数">
	算术函数<br />
</h3>
<table height="241" width="907">
<thead>
<tr>
<th>
				格式
			</th>
<th>
				描述
			</th>
</tr>
</thead>
<tbody>
<tr>
<td>
				atan2( y, x )
			</td>
<td>
				返回 y/x 的反正切。
			</td>
</tr>
<tr>
<td>
				cos( x )
			</td>
<td>
				返回 x 的余弦；x 是弧度。
			</td>
</tr>
<tr>
<td>
				sin( x )
			</td>
<td>
				返回 x 的正弦；x 是弧度。
			</td>
</tr>
<tr>
<td>
				exp( x )
			</td>
<td>
				返回 x 幂函数。
			</td>
</tr>
<tr>
<td>
				log( x )
			</td>
<td>
				返回 x 的自然对数。
			</td>
</tr>
<tr>
<td>
				sqrt( x )
			</td>
<td>
				返回 x 平方根。
			</td>
</tr>
<tr>
<td>
				int( x )
			</td>
<td>
				返回 x 的截断至整数的值。
			</td>
</tr>
<tr>
<td>
				rand( )
			</td>
<td>
				返回任意数字 n，其中 0 &lt;= n &lt; 1。
			</td>
</tr>
<tr>
<td>
				srand( [<span class='wp_keywordlink'><a href="http://man.linuxde.net/expr" title="expr命令" target="_blank">expr</a></span>] )
			</td>
<td>
				将 rand 函数的种子值设置为 Expr 参数的值，或如果省略 Expr 参数则使用某天的时间。返回先前的种子值。
			</td>
</tr>
</tbody>
</table>
<p>
	举例说明：
</p>
<pre>
awk &#39;BEGIN{OFMT=&quot;%.3f&quot;;fs=sin(1);fe=exp(10);fl=log(10);fi=int(3.1415);print fs,fe,fl,fi;}&#39;
<span style="color:#808080;">0.841 22026.466 2.303 3</span>
</pre>
<p>
	OFMT 设置输出数据格式是保留3位小数。
</p>
<p>
	获得随机数：
</p>
<pre>
awk &#39;BEGIN{srand();fr=int(100*rand());print fr;}&#39;
<span style="color:#808080;">78</span>
awk &#39;BEGIN{srand();fr=int(100*rand());print fr;}&#39;
<span style="color:#808080;">31</span>
awk &#39;BEGIN{srand();fr=int(100*rand());print fr;}&#39;
<span style="color:#808080;">41 </span></pre>
<h3 id="字符串函数">
	字符串函数<br />
</h3>
<table width="100%">
<thead>
<tr>
<th>
				格式
			</th>
<th>
				描述
			</th>
</tr>
</thead>
<tbody>
<tr>
<td>
				gsub( Ere, Repl, [ In ] )
			</td>
<td>
				除了正则表达式所有具体值被替代这点，它和 sub 函数完全一样地执行。
			</td>
</tr>
<tr>
<td>
				sub( Ere, Repl, [ In ] )
			</td>
<td>
				用 Repl 参数指定的字符串替换 In 参数指定的字符串中的由 Ere 参数指定的扩展正则表达式的第一个具体值。sub 函数返回替换的数量。出现在 Repl 参数指定的字符串中的 &amp;（和符号）由 In 参数指定的与 Ere 参数的指定的扩展正则表达式匹配的字符串替换。如果未指定 In 参数，缺省值是整个记录（$0 记录变量）。
			</td>
</tr>
<tr>
<td>
				index( String1, String2 )
			</td>
<td>
				在由 String1 参数指定的字符串（其中有出现 String2 指定的参数）中，返回位置，从 1 开始编号。如果 String2 参数不在 String1 参数中出现，则返回 0（零）。
			</td>
</tr>
<tr>
<td>
				length [(String)]
			</td>
<td>
				返回 String 参数指定的字符串的长度（字符形式）。如果未给出 String 参数，则返回整个记录的长度（$0 记录变量）。
			</td>
</tr>
<tr>
<td>
				blength [(String)]
			</td>
<td>
				返回 String 参数指定的字符串的长度（以字节为单位）。如果未给出 String 参数，则返回整个记录的长度（$0 记录变量）。
			</td>
</tr>
<tr>
<td>
				substr( String, M, [ N ] )
			</td>
<td>
				返回具有 N 参数指定的字符数量子串。子串从 String 参数指定的字符串取得，其字符以 M 参数指定的位置开始。M 参数指定为将 String 参数中的第一个字符作为编号 1。如果未指定 N 参数，则子串的长度将是 M 参数指定的位置到 String 参数的末尾 的长度。
			</td>
</tr>
<tr>
<td>
				match( String, Ere )
			</td>
<td>
				在 String 参数指定的字符串（Ere 参数指定的扩展正则表达式出现在其中）中返回位置（字符形式），从 1 开始编号，或如果 Ere 参数不出现，则返回 0（零）。RSTART 特殊变量设置为返回值。RLENGTH 特殊变量设置为匹配的字符串的长度，或如果未找到任何匹配，则设置为 -1（负一）。
			</td>
</tr>
<tr>
<td>
				split( String, A, [Ere] )
			</td>
<td>
				将 String 参数指定的参数分割为数组元素 A[1], A[2], . . ., A[n]，并返回 n 变量的值。此分隔可以通过 Ere 参数指定的扩展正则表达式进行，或用当前字段分隔符（FS 特殊变量）来进行（如果没有给出 Ere 参数）。除非上下文指明特定的元素还应具有一个数字值，否则 A 数组中的元素用字符串值来创建。
			</td>
</tr>
<tr>
<td>
				tolower( String )
			</td>
<td>
				返回 String 参数指定的字符串，字符串中每个大写字符将更改为小写。大写和小写的映射由当前语言环境的 LC_CTYPE 范畴定义。
			</td>
</tr>
<tr>
<td>
				toupper( String )
			</td>
<td>
				返回 String 参数指定的字符串，字符串中每个小写字符将更改为大写。大写和小写的映射由当前语言环境的 LC_CTYPE 范畴定义。
			</td>
</tr>
<tr>
<td>
				sprintf(Format, Expr, Expr, . . . )
			</td>
<td>
				根据 Format 参数指定的 printf 子例程格式字符串来格式化 Expr 参数指定的表达式并返回最后生成的字符串。
			</td>
</tr>
</tbody>
</table>
<p>
	<span style="color:#f00;">注：Ere都可以是正则表达式。</span>
</p>
<p>
	<strong>gsub,sub使用</strong>
</p>
<pre>
awk &#39;BEGIN{info=&quot;this is a test2010test!&quot;;gsub(/[0-9]+/,&quot;!&quot;,info);print info}&#39;
<span style="color:#808080;">this is a test!test!</span></pre>
<p>
	在 info中查找满足正则表达式，<code>/[0-9]+/ </code>用<code>&rdquo;&rdquo;</code>替换，并且替换后的值，赋值给info 未给info值，默认是<code>$0</code>
</p>
<p>
	<strong>查找字符串（index使用）</strong>
</p>
<pre>
awk &#39;BEGIN{info=&quot;this is a test2010test!&quot;;print index(info,&quot;test&quot;)?&quot;ok&quot;:&quot;no found&quot;;}&#39;
<span style="color:#808080;">ok</span></pre>
<p>
	未找到，返回0
</p>
<p>
	<strong>正则表达式匹配查找(match使用）</strong>
</p>
<pre>
awk &#39;BEGIN{info=&quot;this is a test2010test!&quot;;print match(info,/[0-9]+/)?&quot;ok&quot;:&quot;no found&quot;;}&#39;
<span style="color:#808080;">ok</span></pre>
<p>
	<strong>截取字符串(substr使用）</strong>
</p>
<pre>
[wangsl@centos5 ~]$ awk &#39;BEGIN{info=&quot;this is a test2010test!&quot;;print substr(info,4,10);}&#39;
<span style="color:#808080;">s is a tes</span></pre>
<p>
	从第 4个 字符开始，截取10个长度字符串
</p>
<p>
	<strong>字符串分割（split使用）</strong>
</p>
<pre>
awk &#39;BEGIN{info=&quot;this is a test&quot;;split(info,tA,&quot; &quot;);print length(tA);for(k in tA){print k,tA[k];}}&#39;
<span style="color:#808080;">4
4 test
1 this
2 is
3 a</span></pre>
<p>
	分割info，动态创建数组tA，这里比较有意思，<code>awk for &hellip;in</code>循环，是一个无序的循环。 并不是从数组下标1&hellip;n ，因此使用时候需要注意。
</p>
<p>
	<strong>格式化字符串输出（sprintf使用）</strong>
</p>
<p>
	<span style="COLOR: #0000ff">格式化字符串格式：</span>
</p>
<p>
	其中格式化字符串包括两部分内容：一部分是正常字符，这些字符将按原样输出; 另一部分是格式化规定字符，以<code>&quot;%&quot;</code>开始，后跟一个或几个规定字符,用来确定输出内容格式。
</p>
<table width="100%">
<thead>
<tr>
<th>
				格式
			</th>
<th>
				描述
			</th>
</tr>
</thead>
<tbody>
<tr>
<td>
				%d
			</td>
<td>
				十进制有符号整数
			</td>
</tr>
<tr>
<td>
				%u
			</td>
<td>
				十进制无符号整数
			</td>
</tr>
<tr>
<td>
				%f
			</td>
<td>
				浮点数
			</td>
</tr>
<tr>
<td>
				%s
			</td>
<td>
				字符串
			</td>
</tr>
<tr>
<td>
				%c
			</td>
<td>
				单个字符
			</td>
</tr>
<tr>
<td>
				%p
			</td>
<td>
				指针的值
			</td>
</tr>
<tr>
<td>
				%e
			</td>
<td>
				指数形式的浮点数
			</td>
</tr>
<tr>
<td>
				%x
			</td>
<td>
				%X 无符号以十六进制表示的整数
			</td>
</tr>
<tr>
<td>
				%o
			</td>
<td>
				无符号以八进制表示的整数
			</td>
</tr>
<tr>
<td>
				%g
			</td>
<td>
				自动选择合适的表示法
			</td>
</tr>
</tbody>
</table>
<pre>
awk &#39;BEGIN{n1=124.113;n2=-1.224;n3=1.2345; printf(&quot;%.2f,%.2u,%.2g,%X,%on&quot;,n1,n2,n3,n1,n1);}&#39;
<span style="color:#808080;">124.11,18446744073709551615,1.2,7C,174</span></pre>
<h3 id="一般函数">
	一般函数<br />
</h3>
<table width="100%">
<thead>
<tr>
<th>
				格式
			</th>
<th>
				描述
			</th>
</tr>
</thead>
<tbody>
<tr>
<td>
				close( Expression )
			</td>
<td>
				用同一个带字符串值的 Expression 参数来关闭由 print 或 printf 语句打开的或调用 getline 函数打开的文件或管道。如果文件或管道成功关闭，则返回 0；其它情况下返回非零值。如果打算写一个文件，并稍后在同一个程序中读取文件，则 close 语句是必需的。
			</td>
</tr>
<tr>
<td>
				system(<span class='wp_keywordlink'><a href="http://man.linuxde.net/command" title="command命令" target="_blank">command</a></span> )
			</td>
<td>
				执行 Command 参数指定的命令，并返回退出状态。等同于 system 子例程。
			</td>
</tr>
<tr>
<td>
				Expression | getline [ Variable ]
			</td>
<td>
				从来自 Expression 参数指定的命令的输出中通过管道传送的流中读取一个输入记录，并将该记录的值指定给 Variable 参数指定的变量。如果当前未打开将 Expression 参数的值作为其命令名称的流，则创建流。创建的流等同于调用 popen 子例程，此时 Command 参数取 Expression 参数的值且 Mode 参数设置为一个是 r 的值。只要流保留打开且 Expression 参数求得同一个字符串，则对 getline 函数的每次后续调用读取另一个记录。如果未指定 Variable 参数，则 $0 记录变量和 NF 特殊变量设置为从流读取的记录。
			</td>
</tr>
<tr>
<td>
				getline [ Variable ] &lt; Expression
			</td>
<td>
				从 Expression 参数指定的文件读取输入的下一个记录，并将 Variable 参数指定的变量设置为该记录的值。只要流保留打开且 Expression 参数对同一个字符串求值，则对 getline 函数的每次后续调用读取另一个记录。如果未指定 Variable 参数，则 $0 记录变量和 NF 特殊变量设置为从流读取的记录。
			</td>
</tr>
<tr>
<td>
				getline [ Variable ]
			</td>
<td>
				将 Variable 参数指定的变量设置为从当前输入文件读取的下一个输入记录。如果未指定 Variable 参数，则 $0 记录变量设置为该记录的值，还将设置 NF、NR 和 FNR 特殊变量。
			</td>
</tr>
</tbody>
</table>
<p>
	<strong style="color: rgb(0, 0, 0);">打开外部文件（close用法）</strong>
</p>
<pre>
awk &#39;BEGIN{while(&quot;cat /etc/passwd&quot;|getline){print $0;};close(&quot;/etc/passwd&quot;);}&#39;
<span style="color:#808080;">root:x:0:0:root:/root:/bin/bash
bin:x:1:1:bin:/bin:/sbin/<span class='wp_keywordlink'><a href="http://man.linuxde.net/nologin" title="nologin命令" target="_blank">nologin</a></span>
daemon:x:2:2:daemon:/sbin:/sbin/nologin</span></pre>
<p>
	<strong>逐行读取外部文件(getline使用方法）</strong>
</p>
<pre>
awk &#39;BEGIN{while(getline &lt; &quot;/etc/passwd&quot;){print $0;};close(&quot;/etc/passwd&quot;);}&#39;
<span style="color:#808080;">root:x:0:0:root:/root:/bin/bash
bin:x:1:1:bin:/bin:/sbin/nologin
daemon:x:2:2:daemon:/sbin:/sbin/nologin</span></pre>
<pre>
awk &#39;BEGIN{print &quot;Enter your name:&quot;;getline name;print name;}&#39;
<span style="color:#808080;">Enter your name:
chengmo
chengmo</span></pre>
<p>
	<strong>&nbsp;</strong><strong>调用外部应用程序(system使用方法）</strong>
</p>
<pre>
awk &#39;BEGIN{b=system(&quot;ls -al&quot;);print b;}&#39;
<span style="color:#808080;">total 42092
drwxr-xr-x 14 chengmo chengmo     4096 09-30 17:47 .
drwxr-xr-x 95 root   root       4096 10-08 14:01 ..</span></pre>
<p>
	b返回值，是执行结果。
</p>
<h3 id="时间函数">
	时间函数<br />
</h3>
<table width="100%">
<thead>
<tr>
<th>
				格式
			</th>
<th>
				描述
			</th>
</tr>
</thead>
<tbody>
<tr>
<td>
				函数名
			</td>
<td>
				说明
			</td>
</tr>
<tr>
<td>
				mktime( YYYY MM <span class='wp_keywordlink'><a href="http://man.linuxde.net/dd" title="dd命令" target="_blank">dd</a></span> HH MM <span class='wp_keywordlink'><a href="http://man.linuxde.net/ss" title="ss命令" target="_blank">ss</a></span>[ DST])
			</td>
<td>
				生成时间格式
			</td>
</tr>
<tr>
<td>
				strftime([format [, timestamp]])
			</td>
<td>
				格式化时间输出，将时间戳转为时间字符串<br />
				具体格式，见下表.
			</td>
</tr>
<tr>
<td>
				systime()
			</td>
<td>
				得到时间戳,返回从1970年1月1日开始到当前时间(不计闰年)的整秒数
			</td>
</tr>
</tbody>
</table>
<p>
	<strong style="color: rgb(0, 0, 0);">建指定时间(mktime使用）</strong>
</p>
<pre>
awk &#39;BEGIN{tstamp=mktime(&quot;2001 01 01 12 12 12&quot;);print strftime(&quot;%c&quot;,tstamp);}&#39;
<span style="color:#808080;">2001年01月01日 星期一 12时12分12秒</span></pre>
<pre>
awk &#39;BEGIN{tstamp1=mktime(&quot;2001 01 01 12 12 12&quot;);tstamp2=mktime(&quot;2001 02 01 0 0 0&quot;);print tstamp2-tstamp1;}&#39;
<span style="color:#808080;">2634468</span></pre>
<p>
	求2个时间段中间时间差，介绍了strftime使用方法
</p>
<pre>
awk &#39;BEGIN{tstamp1=mktime(&quot;2001 01 01 12 12 12&quot;);tstamp2=systime();print tstamp2-tstamp1;}&#39; 
<span style="color:#808080;">308201392</span></pre>
<p>
	<strong>strftime日期和时间格式说明符</strong>
</p>
<table width="100%">
<thead>
<tr>
<th>
				格式
			</th>
<th>
				描述
			</th>
</tr>
</thead>
<tbody>
<tr>
<td>
				%a
			</td>
<td>
				星期几的缩写(Sun)
			</td>
</tr>
<tr>
<td>
				%A
			</td>
<td>
				星期几的完整写法(Sunday)
			</td>
</tr>
<tr>
<td>
				%b
			</td>
<td>
				月名的缩写(Oct)
			</td>
</tr>
<tr>
<td>
				%B
			</td>
<td>
				月名的完整写法(October)
			</td>
</tr>
<tr>
<td>
				%c
			</td>
<td>
				本地日期和时间
			</td>
</tr>
<tr>
<td>
				%d
			</td>
<td>
				十进制日期
			</td>
</tr>
<tr>
<td>
				%D
			</td>
<td>
				日期 08/20/99
			</td>
</tr>
<tr>
<td>
				%e
			</td>
<td>
				日期，如果只有一位会补上一个空格
			</td>
</tr>
<tr>
<td>
				%H
			</td>
<td>
				用十进制表示24小时格式的小时
			</td>
</tr>
<tr>
<td>
				%I
			</td>
<td>
				用十进制表示12小时格式的小时
			</td>
</tr>
<tr>
<td>
				%j
			</td>
<td>
				从1月1日起一年中的第几天
			</td>
</tr>
<tr>
<td>
				%m
			</td>
<td>
				十进制表示的月份
			</td>
</tr>
<tr>
<td>
				%M
			</td>
<td>
				十进制表示的分钟
			</td>
</tr>
<tr>
<td>
				%p
			</td>
<td>
				12小时表示法(AM/PM)
			</td>
</tr>
<tr>
<td>
				%S
			</td>
<td>
				十进制表示的秒
			</td>
</tr>
<tr>
<td>
				%U
			</td>
<td>
				十进制表示的一年中的第几个星期(星期天作为一个星期的开始)
			</td>
</tr>
<tr>
<td>
				%<span class='wp_keywordlink'><a href="http://man.linuxde.net/w" title="w命令" target="_blank">w</a></span>
			</td>
<td>
				十进制表示的星期几(星期天是0)
			</td>
</tr>
<tr>
<td>
				%W
			</td>
<td>
				十进制表示的一年中的第几个星期(星期一作为一个星期的开始)
			</td>
</tr>
<tr>
<td>
				%x
			</td>
<td>
				重新设置本地日期(08/20/99)
			</td>
</tr>
<tr>
<td>
				%X
			</td>
<td>
				重新设置本地时间(12：00：00)
			</td>
</tr>
<tr>
<td>
				%y
			</td>
<td>
				两位数字表示的年(99)
			</td>
</tr>
<tr>
<td>
				%Y
			</td>
<td>
				当前月份
			</td>
</tr>
<tr>
<td>
				%Z
			</td>
<td>
				时区(PDT)
			</td>
</tr>
<tr>
<td>
				%%
			</td>
<td>
				百分号(%)
			</td>
</tr>
</tbody>
</table>
        </div>
        <div class="post_ft">
            <div class="title">最近更新的命令</div>
            <ul>
                <li><a href="http://man.linuxde.net/cut" title="cut">cut</a></li><li><a href="http://man.linuxde.net/sh" title="sh">sh</a></li><li><a href="http://man.linuxde.net/seq" title="seq">seq</a></li><li><a href="http://man.linuxde.net/awk" title="awk">awk</a></li><li><a href="http://man.linuxde.net/syslog" title="syslog">syslog</a></li><li><a href="http://man.linuxde.net/inotifywait" title="inotifywait">inotifywait</a></li><li><a href="http://man.linuxde.net/dd" title="dd">dd</a></li><li><a href="http://man.linuxde.net/read" title="read">read</a></li><li><a href="http://man.linuxde.net/uname" title="uname">uname</a></li><li><a href="http://man.linuxde.net/pssh" title="pssh">pssh</a></li><li><a href="http://man.linuxde.net/tar" title="tar">tar</a></li><li><a href="http://man.linuxde.net/axel" title="axel">axel</a></li><li><a href="http://man.linuxde.net/losetup" title="losetup">losetup</a></li><li><a href="http://man.linuxde.net/lsb_release" title="lsb_release">lsb_release</a></li><li><a href="http://man.linuxde.net/tcpreplay" title="tcpreplay">tcpreplay</a></li><li><a href="http://man.linuxde.net/strings" title="strings">strings</a></li><li><a href="http://man.linuxde.net/screen" title="screen">screen</a></li><li><a href="http://man.linuxde.net/speedtest-cli" title="speedtest-cli">speedtest-cli</a></li><li><a href="http://man.linuxde.net/clockdiff" title="clockdiff">clockdiff</a></li><li><a href="http://man.linuxde.net/ntpdate" title="ntpdate">ntpdate</a></li><li><a href="http://man.linuxde.net/dnf" title="dnf">dnf</a></li><li><a href="http://man.linuxde.net/nethogs" title="nethogs">nethogs</a></li><li><a href="http://man.linuxde.net/hping3" title="hping3">hping3</a></li><li><a href="http://man.linuxde.net/trap" title="trap">trap</a></li><li><a href="http://man.linuxde.net/let" title="let">let</a></li><li><a href="http://man.linuxde.net/ifstat" title="ifstat">ifstat</a></li><li><a href="http://man.linuxde.net/blkid" title="blkid">blkid</a></li><li><a href="http://man.linuxde.net/ipcrm" title="ipcrm">ipcrm</a></li><li><a href="http://man.linuxde.net/openssl" title="openssl">openssl</a></li><li><a href="http://man.linuxde.net/chage" title="chage">chage</a></li>            </ul>
        </div>
        <div id="comments">
            <!-- You can start editing here. -->
        </div>
    </div>
    
<div class="sidebar">
    <div class="widget related">
        <div class="hd">
            <h3>相关命令</h3>
        </div>
        <div class="bd">
            <ul>
                            <li><a href="http://man.linuxde.net/yes" title="yes">yes</a></li>
                <li><a href="http://man.linuxde.net/md5sum" title="md5sum">md5sum</a></li>
                <li><a href="http://man.linuxde.net/bc" title="bc">bc</a></li>
                <li><a href="http://man.linuxde.net/gpm" title="gpm">gpm</a></li>
                <li><a href="http://man.linuxde.net/clockdiff" title="clockdiff">clockdiff</a></li>
                <li><a href="http://man.linuxde.net/rsync" title="rsync">rsync</a></li>
                <li><a href="http://man.linuxde.net/date" title="date">date</a></li>
                <li><a href="http://man.linuxde.net/talk" title="talk">talk</a></li>
                <li><a href="http://man.linuxde.net/login" title="login">login</a></li>
                <li><a href="http://man.linuxde.net/hostid" title="hostid">hostid</a></li>
                <li><a href="http://man.linuxde.net/pssh" title="pssh">pssh</a></li>
                <li><a href="http://man.linuxde.net/users" title="users">users</a></li>
                <li><a href="http://man.linuxde.net/sleep" title="sleep">sleep</a></li>
                <li><a href="http://man.linuxde.net/cal" title="cal">cal</a></li>
                <li><a href="http://man.linuxde.net/ntpdate" title="ntpdate">ntpdate</a></li>
                <li><a href="http://man.linuxde.net/dircolors" title="dircolors">dircolors</a></li>
                <li><a href="http://man.linuxde.net/whatis" title="whatis">whatis</a></li>
                <li><a href="http://man.linuxde.net/screen" title="screen">screen</a></li>
                <li><a href="http://man.linuxde.net/wall" title="wall">wall</a></li>
                <li><a href="http://man.linuxde.net/whoami" title="whoami">whoami</a></li>
                </ul>
        </div>
    </div>
    <div id="fixedBox">
        <div id="float" class="dbox">
            <div class="sidebar_search_box">
                <form action="http://man.linuxde.net/">
                    <input type="text" name="s" id="sidebar_search" value="命令搜索" onFocus="if (value =='命令搜索'){value =''}" onBlur="if (value ==''){value='命令搜索'}" />
                </form>
                <form action="http://man.linuxde.net/" method="post">
                    <input type="text" name="ss" id="sidebar_search" value="命令直达" onFocus="if (value =='命令直达'){value =''}" onBlur="if (value ==''){value='命令直达'}" />
                </form>
            </div>
            <div class="widget ad"> 
				<!--
				<script type="text/javascript">
					document.write('<a style="display:none!important" id="tanx-a-mm_22964816_6616438_33736229"></a>');
					tanx_s = document.createElement("script");
					tanx_s.type = "text/javascript";
					tanx_s.charset = "gbk";
					tanx_s.id = "tanx-s-mm_22964816_6616438_33736229";
					tanx_s.async = true;
					tanx_s.src = "http://p.tanx.com/ex?i=mm_22964816_6616438_33736229";
					tanx_h = document.getElementsByTagName("head")[0];
					if(tanx_h)tanx_h.insertBefore(tanx_s,tanx_h.firstChild);
				</script>
				-->
				<a title="linux马克杯" href="http://man.linuxde.net/go.php?http://s.click.taobao.com/t?e=m%3D2%26s%3DbWlkMAz37zAcQipKwQzePDAVflQIoZepLKpWJ%2Bin0XJRAdhuF14FMdl7wKby%2Bc%2FExq3IhSJN6GSAAkUL03DNGUpamuccnq1qrmvEga4qAXJgE5NxN1hjMoxodiO%2Bbyu%2BIYULNg46oBA%3D" target="_blank"><img src="http://112.124.15.130/res/linuxde_man/images/s-ad.jpg" alt="linux马克杯"></a>
            </div>
        </div>
    </div>
</div>
</div>
</div>

<div class="layout layout_ft">
    <div class="footer">
        <div class="copyright">
            <a href="http://man.linuxde.net/" title="Linux命令大全">Linux命令大全</a>
            <em class="sx"></em>
            <a href="http://man.linuxde.net/about_us" title="关于">关于</a>
            <em class="sx"></em>
			收藏本站请使用Ctrl+D
			<em class="sx"></em>
			<a href="http://man.linuxde.net/shell-script" target="_blank">Shell脚本攻略</a>
			<em class="sx"></em>
			<a href="http://man.linuxde.net/docs/shell_regex.html" target="_blank">Shell正则表达式</a>
			<em class="sx"></em>
			共收录528条Linux系统指令
        </div>
        <div class="des">在Linux命令大全（man.linuxde.net）可以查询您所需要的Linux命令教程和相关实例。如果您觉得本站内容对您有所帮助，请推荐给更多需要帮助的人。</div>
        <div class="info">
		赞助商链接：<a href="http://www.1987.name/" target="_blank">组装电脑配置清单2017</a>,　运行在<a href="http://man.linuxde.net/go.php?http://s.click.taobao.com/t?e=m%3D2%26s%3DvTDIoAjlYzMcQipKwQzePCperVdZeJviEViQ0P1Vf2kguMN8XjClAhYdwmcpX19FpcfgoZBkhQKMhxXrDnK9L8ge8W1gUmbKFOH2PYQYfJNjOghCi4TzwOdn1BbglxZYxUhy8exlzcq9AmARIwX9K2Zg%2BdzdQFOwfMRvoxSVDSdLyrb2g0H2G5JcxXijM%2BwneEHpPTskRHknGN7svee8j7S4un6ZpbmpIYULNg46oBA%3D" target="_blank">阿里云服务器</a>！
		</div>
    </div>
</div>
</div>
<!--js-->
<script type="text/javascript" src="http://112.124.15.130/res/linuxde_man/js/sitejs.js"></script>
<script>window._bd_share_config={"common":{"bdSnsKey":{},"bdText":"","bdMini":"2","bdMiniList":false,"bdPic":"","bdStyle":"0","bdSize":"16"},"slide":{"type":"slide","bdImg":"3","bdPos":"right","bdTop":"100"}};with(document)0[(getElementsByTagName('head')[0]||body).appendChild(createElement('script')).src='http://bdimg.share.baidu.com/static/api/js/share.js?v=86835285.js?cdnversion='+~(-new Date()/36e5)];</script>
<div style="display:none"><script src="http://s17.cnzz.com/stat.php?id=5762282&web_id=5762282" language="JavaScript"></script></div>

<!--活动推广
<script type="text/javascript" src="http://112.124.15.130/res/ad/ad.js"></script>
<style type="text/css">
.ad-box{width:240px;height:277px;background:#CCC;position:fixed;right:-240px;bottom:10px;}
.ad-img{position:relative;overflow:hidden;}
.ad-close{width:30px;height:22px;line-height:22px;display:block;top:10px;right:10px;position:absolute;}
</style>
<div class="ad-box">
    <div class="ad-img">
        <a href="http://man.linuxde.net/go.php?http://s.click.taobao.com/t?e=m%3D2%26s%3DuGXlvKu7Iv4cQipKwQzePCperVdZeJviK7Vc7tFgwiFRAdhuF14FMZQUNi%2Bb4SgsMMgx22UI05aAAkUL03DNGT6XZIOJR7dCTAHi9HSRVmdzguIHwwNmQ6UuZxIcp9pfUIgVEmFmgnbDX0%2BHH2IEVaX4VWt66S4EJPwiig1bxLP9BvYCQR6XAr%2BKQ71wHNCAqP8YyUoZZlq4cXg3ii9waXPs9Sj9Qli1np4c65at3FeX3cwyLTlAhj2l4PysJx%2FP" target="_blank"><img src="http://112.124.15.130/res/ad/1111.jpg"></a>
        <a href="javascript:" class="ad-close">关闭</a>
    </div>
</div>
<!--推广结束-->

</body></html>